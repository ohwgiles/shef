#!/bin/bash

if [[ -z "$SERVER_SOFTWARE" ]]; then
	# Assume we were invoked directly: exec lighttpd to be our http server
	cd "$(dirname "${BASH_SOURCE[0]}")"
	conf=$(mktemp)
	trap "rm -f $conf" EXIT
	cat > $conf <<-\EOF
		server.document-root = var.CWD + "/notes/"
		server.port = "4431"
		server.modules = ( "mod_cgi", "mod_rewrite" )
		mimetype.assign = (
		".jpg"  => "image/jpeg",
		".txt" => "text/plain" )
		$HTTP["request-method"] != "GET" {
			url.rewrite-once = ( "" => "/" )
		}
		$HTTP["url"] !~ "\.(jpg|txt)$" {
		# jpgs and txts served directly by lighttpd, other requests redirected to shef
			url.rewrite-once = ( "" => "/${qsa}" )
		}
		$HTTP["url"] == "/" {
			server.document-root = var.CWD
			index-file.names = ( "shef" )
			cgi.assign = ( "shef" => "" )
		}
		# SSL
		server.modules += ( "mod_openssl" )
		$SERVER["socket"] == ":4431" {
			ssl.engine = "enable"
			ssl.pemfile = var.CWD + "/server-chain.pem"
		}
	EOF
	/usr/sbin/lighttpd -Df $conf
	exit
fi

# Otherwise, we are a CGI script!
# Set up the git dir to store the notes
NOTES_DIR="$(dirname "${BASH_SOURCE[0]}")/notes"
mkdir -p "$NOTES_DIR"
cd "$NOTES_DIR"
if [[ ! -d .git ]] && ! { git init &> /dev/null && \
  git config user.name shef && \
  git config user.email shef@localhost; }
then
  echo "shef: Could not initialize git repository in $PWD" >&2
  echo -e 'Status: 500 Server Error\n\n'
  exit
fi

echo "shef: $REQUEST_METHOD $REQUEST_URI $CONTENT_TYPE" >&2
#env >&2
function urldecode() { local v="${*//+/ }"; echo -e "${v//%/\\x}"; }
shopt -s extglob

if [[ "$REQUEST_METHOD" == "PUT" ]]; then
  out=$(urldecode "$REQUEST_URI")
  out=${out##*(/)}
  if [[ -n $out ]] && cat >"$out" && flock .git bash -ec \
    "git add \"$out\" && git commit -m\"Update from $REMOTE_ADDR\" -m\"$HTTP_USER_AGENT\""
  then
    echo -e 'Status: 200 OK\n\n{}'
  else
    echo -e 'Status: 400 Bad Request\n\n{}'
  fi
  exit
fi

# Main data request
if [[ "$REQUEST_URI" == "/data.json" ]]; then
	# Output all notes in the format
	# { filename: contents, ... }
	result='{}'
	for f in *.txt; do
		f=${f%%.txt}
		result=$(jq -s "$result * .[0]" <(jq -s "{\"$f\": .[0]}" <(jq -sR . "$f.txt")));
	done
	# To test unreachability:
	#echo -e "Status: 400 Bad Request\n\n"
	echo -e 'Status: 200 OK\nContent-type: application/json; charset=utf-8\n\n'
	echo "$result"
	exit
fi

# Application manifest
if [[ "$REQUEST_URI" == "/manifest.webmanifest" ]]; then
cat <<\EOF
Status: 200 OK
Content-type: application/manifest+json

{
  "name": "Shef",
  "short_name": "Shef",
  "description": "Recipe/notes store.",
  "display": "standalone",
  "orientation":"portrait",
  "background_color": "#333333",
  "scope": "/"
}
EOF
exit
fi

# Icon
if [[ "$REQUEST_URI" == "/icon.png" ]]; then
cat <<EOF
Status: 200 OK
Content-type: image/png

EOF
rsvg-convert -w 180 -h 180 <(cat <<EOF
<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
 <rect width="100" height="100" fill="#333333" />
 <text x="30" y="75" fill="white" font-family="sans-serif" font-size="18">#!shef</text>
</svg>
EOF
)
exit
fi

# Service worker
if [[ "$REQUEST_URI" == "/sw.js" ]]; then
cat <<\EOF
Status: 200 OK
Content-type: application/javascript; charset=utf-8

self.addEventListener('fetch', (event) => {
  const path = event.request.url.substring(self.location.origin.length);
  if(!path.startsWith("/sync?") && event.request.method == 'GET') {
    event.respondWith(
      caches.match(event.request).then((resp) => {
        return resp || fetch(event.request).then((response) => {
          return caches.open('shef').then((cache) => {
            cache.put(event.request, response.clone());
            return response;
          });
        });
      })
    );
  }
});
EOF
exit
fi

# Fetch server-side changes
if [[ "$REQUEST_URI" == "/sync?$QUERY_STRING" ]]; then
IFS== read _ from <<<$QUERY_STRING
cat <<EOF
Status: 200 OK
Content-type: application/json; charset=utf-8

EOF
(git rev-parse --verify -q --end-of-options "$from" &>/dev/null && \
  git diff $from..HEAD --summary --name-status | xargs -r printf '%b\t%b\n' |
   jq -Rn 'reduce (inputs|split("\t")) as $i ({}; .[$i[0]] += [$i[1]])|
    {"created":(.A//[]),"modified":(.M//[]),"deleted":(.D//[])}' ||
  git ls-files | xargs -r printf '%b\n' | \
   jq -Rn '{"created":[inputs],"modified":[],"deleted":[]}') |
jq "{ \"head\": \"$(git rev-parse --verify -q HEAD)\"} * ."
exit
fi

# Main page
if [[ "$REQUEST_URI" == "/" ]]; then
cat <<\EOF
Status: 200 OK
Content-type: text/html; charset=utf-8

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="utf-8">
 <link rel="manifest" href="/manifest.webmanifest">
 <meta name="viewport" content="width=device-width, initial-scale=1">
 <link rel="apple-touch-icon" href="/icon.png">
 <title>Shef</title>
 <style>
  body { font-family: 'SF Pro', Helvetica, Arial, sans-serif; margin: 0; background-color: #333; color: #222; font-size: x-large; }
  #notes { display: flex; flex-wrap: wrap; }
  .note { position: relative; cursor: pointer; flex-grow: 1; height: 20vh; min-width: 100px; display: flex; }
  .note img { object-fit: cover; min-width: 100%; max-height: 100%; }
  .note span { position: absolute; left: 0; bottom: 0; right: 0; top: 0; padding: 10px;
               overflow: hidden; display: flex; align-items: flex-end; color: white;
               font-size: 28px; font-weight: bold; -webkit-text-stroke: 1px black; }
  #detail { background-color: white; position: fixed; top: 0; width: 100vw; overflow: auto;
            margin-top: 100vh; height: 0; transition: margin-top 400ms ease, height 400ms ease;
            display: flex; flex-direction: column; touch-action: none; }
  #detail.shown { height: 100%; margin-top: 0; }
  #detail>div { display: flex; padding: 10px; gap: 10px; }
  #detail-toolbar { border-bottom: 1px solid lightgray; color: gray; }
  #detail-title { font-size: xx-large; color: #555; border-bottom: 1px solid lightgray; }
  #detail-content { padding: 10px; font-family: inherit; font-size: inherit; border: none; outline: none; flex-grow: 1; }
  .icon { padding: 5px; color: #aaa; cursor: pointer; }
  .icon:hover { color: #777; }
  .icon.add { position: fixed; right: 0; bottom: 0; margin: 1em; display: grid; place-content: center;
              border-radius: 1.3em; height: 1.3em; width: 1.3em; color: white; background-color: #2196F3; }
  .action { font-size: x-large; cursor: pointer; }
  .action.save { display: none; }
 </style>
</head>
<body>
 <div id="notes"></div>
 <span class="icon add">&#x2795;&#xfe0e;</span>
 <div id="detail">
  <div id="detail-toolbar">
   <span class="action image">Image</span>
   <span class="action edit">Edit</span>
   <span class="action save">Save</span>
   <span style="flex-grow: 1"></span>
   <span class="action close">Close</span>
  </div>
  <div id="detail-title" dir="auto"></div>
  <textarea id="detail-content" dir="auto" readonly="true"></textarea>
 </div>
 <form><input id="upload" type="file" accept="image/*" hidden>
<script>

function checkForServerChanges() {
  const head = localStorage.getItem('head');
  fetch(`/sync?head=${head}`).then(resp => resp.json()).then(resp => {
    const paths = []
       .concat(resp.created)
       .concat(resp.modified)
       .concat(resp.deleted);
    if(paths.length == 0)
      return;
    caches.open('shef')
      .then(cache => Promise.all(paths.map(path => cache.delete(new Request(path)))))
      .then(() => Promise.all(paths.map(path => fetch(path)))) // re-populate cache
      .then(() =>
    {
      // update list of known notes
      localStorage.setItem('entries', JSON.stringify(
        JSON.parse(localStorage.getItem('entries') || '[]')
          .filter(entry => !resp.deleted.includes(`${entry}.txt`))
          .concat(resp.created.filter(e => e.endsWith('.txt')).map(e => e.slice(0, -4)))
      ));
      localStorage.setItem('head', resp.head);
      location.reload(); // TODO: more gently
    });
  });
}

function storeLocalChanges() {
  const changedPaths = JSON.parse(localStorage.getItem('changedPaths') || '[]');
  return caches.open('shef').then(cache => 
    Promise.all(changedPaths.map(path =>
      cache.match(new Request(path)).then(resp => {
        const put = (contentType, body) => fetch(path, {
          method: 'PUT',
          headers: { 'Content-type': contentType },
          body: body
        });
        return ({
          ".txt": () => resp.text().then(txt => put('text/plain', txt)),
          ".jpg": () => resp.blob().then(blob => put('image/jpeg', blob))
        })[path.slice(-4)]();
      }).then(() => changedPaths.splice(changedPaths.indexOf(path), 1))
    )).then(() => localStorage.setItem('changedPaths', JSON.stringify(changedPaths)))
  );
}

function pathChanged(path) {
  const changed = JSON.parse(localStorage.getItem('changedPaths') || '[]');
  if(changed.indexOf(path) == -1)
    localStorage.setItem('changedPaths', JSON.stringify(changed.concat(path)));
}

const dom = {
  notes: document.querySelector('#notes'),
  detail: document.querySelector('#detail'),
  content: document.querySelector('#detail-content'),
  title: document.querySelector('#detail-title'),
  close: document.querySelector('.action.close'),
  edit: document.querySelector('.action.edit'),
  save: document.querySelector('.action.save'),
  image: document.querySelector('.action.image'),
  add: document.querySelector('.icon.add'),
  upload: document.querySelector('#upload'),
};
  
dom.close.onclick = function() {
  dom.edit.style.display = 'block';
  dom.save.style.display = 'none';
  dom.content.readOnly = true;
  dom.title.contentEditable = false;
  dom.detail.classList.remove('shown');
  localStorage.removeItem('active');
};

dom.edit.onclick = function() {
  dom.content.readOnly = false;
  dom.edit.style.display = 'none';
  dom.save.style.display = 'block';
};
      
dom.save.onclick = function() {
  const name = dom.title.innerText;
  const content = dom.content.value;
  caches.open('shef')
    .then(cache => cache.put(new Request(`${name}.txt`), new Response(new Blob([content], {type:'text/plain'}), {status:200})))
    .then(() =>
  {
    pathChanged(`${name}.txt`);
    storeLocalChanges();
    if(dom.title.isContentEditable) // new note
      createNote(name).querySelector('img').src = `${name}.jpg`;
    dom.close.click();
  });
}

dom.add.onclick = function() {
  dom.detail.classList.add('shown');
  dom.content.value = "";
  dom.content.readOnly = false;
  dom.title.innerText = "";
  dom.title.contentEditable = true;
  dom.title.focus();
  dom.edit.click();
}
      
dom.upload.onchange = function(e) {
  const fr = new FileReader();
  fr.onload = function() {
    const img = document.createElement('img');
    img.onload = function() {
      const canvas = document.createElement('canvas');
      const scale = 0.2;
      canvas.width = img.width * scale;
      canvas.height = img.height * scale;
      canvas.getContext('2d').drawImage(img, 0, 0, canvas.width, canvas.height);
      canvas.toBlob(blob => {
        const name = dom.title.innerText;
        caches.open('shef')
          .then(cache => cache.put(new Request(`${name}.jpg`), new Response(blob, {status:200})))
          .then(() =>
          {
            pathChanged(`${name}.jpg`);
            storeLocalChanges();
            const active = localStorage.getItem('active');
            // false if new note, in which case this is done on save
            if(active)
              document.querySelector(`div[data-name="${active}"] img`).src = `${name}.jpg`;
          }
        );
      }, 'image/jpeg');
    }
    img.src = this.result;
  }
  fr.readAsDataURL(e.target.files[0]);
}

dom.image.onclick = function() {
  dom.upload.click()
};
      
function createNote(name) {
  const div = document.createElement('div');
  div.dataset.name = name;
  div.classList.add('note');
  div.innerHTML += `<img src="${name}.jpg"><span dir="auto">${name}</span>`;
  div.onclick = function() {
    localStorage.setItem('active', name);
    dom.title.innerText = name;
    dom.detail.classList.add('shown');
    // should be cached
    fetch(`${name}.txt`).then(resp => resp.text()).then(txt => dom.content.value = txt);
  }
  dom.notes.appendChild(div);
  return div;
}

// offline support
navigator.serviceWorker.register("sw.js");

// setup page from list of known notes
JSON.parse(localStorage.getItem('entries') || '[]').forEach(name => createNote(name));

// load any active page
const active = localStorage.getItem('active');
if(active)
  document.querySelector(`div[data-name="${active}"]`).click();

// sync with server if available
storeLocalChanges().then(() => checkForServerChanges());

</script>
</body>
</html>
EOF
exit
fi

echo -e 'Status: 404 Not Found\n\n'
